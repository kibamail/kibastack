---

- name: check if current symlink exists
  stat:
    path: "{{ current_symlink }}"
  register: current_symlink_stat

- name: get current deployment path
  shell: "readlink {{ current_symlink }}"
  register: current_deployment_path
  changed_when: false
  failed_when: false
  when: current_symlink_stat.stat.exists and current_symlink_stat.stat.islnk

- name: create temporary symlink
  file:
    src: "{{ deployment_path }}"
    dest: "{{ current_symlink }}.new"
    state: link
    owner: "{{ app_user }}"
    group: "{{ app_group }}"
  become: true

- name: atomically switch symlink
  shell: "mv -Tf {{ current_symlink }}.new {{ current_symlink }}"
  become: true
  register: symlink_result
  changed_when: symlink_result.rc == 0
  failed_when: symlink_result.rc != 0

- name: restart application with pm2
  shell: "cd {{ current_symlink }} && pm2 startOrRestart ecosystem.json"
  become: true
  become_user: "{{ app_user }}"
  register: pm2_result
  changed_when: pm2_result.rc == 0
  failed_when: pm2_result.rc != 0
  environment:
    PATH: "{{ ansible_env.PATH }}:/usr/local/bin"
    INFISICAL_SERVICE_TOKEN: "{{ infisical_service_token }}"

- name: save pm2 process list
  shell: "pm2 save"
  become: true
  become_user: "{{ app_user }}"
  register: pm2_save_result
  changed_when: pm2_save_result.rc == 0
  failed_when: pm2_save_result.rc != 0
  environment:
    PATH: "{{ ansible_env.PATH }}:/usr/local/bin"
    INFISICAL_SERVICE_TOKEN: "{{ infisical_service_token }}"

- name: ensure pm2 starts on server boot
  shell: "pm2 startup systemd -u {{ app_user }} --hp /home/{{ app_user }}"
  become: true
  register: pm2_startup_result
  changed_when: pm2_startup_result.rc == 0
  failed_when: false
