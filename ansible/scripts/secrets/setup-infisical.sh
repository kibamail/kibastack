#!/bin/bash

# setup-infisical.sh - script to fetch secrets from infisical and store them in vault_secrets.txt

# define color codes
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
CYAN='\033[0;36m'
NC='\033[0m' # no color

# infisical configuration
INFISICAL_DOMAIN="https://infisical.kibamail.com"
INFISICAL_PROJECT_ID="3df67a8d-229b-4f34-bd5f-712a60e01d71"

# print header
echo -e "${BLUE}[task]${NC} setting up infisical secrets for ansible..."

# check if infisical cli is installed
if ! command -v infisical &> /dev/null; then
    echo -e "${RED}[error]${NC} infisical cli not found! please install it first."
    echo -e "${YELLOW}[info]${NC} installation guide: https://infisical.com/docs/cli/overview#debian-ubuntu"
    exit 1
fi
echo -e "${GREEN}[success]${NC} infisical cli is installed."

# check if token is provided
if [ -z "$ANSIBLE_INFISICAL_TOKEN" ]; then
    echo -e "${YELLOW}[warning]${NC} ANSIBLE_INFISICAL_TOKEN environment variable not set."
    read -p "Enter your Infisical token: " ANSIBLE_INFISICAL_TOKEN
    if [ -z "$ANSIBLE_INFISICAL_TOKEN" ]; then
        echo -e "${RED}[error]${NC} infisical token is required."
        exit 1
    fi
fi

# determine environment
ENV=${1:-staging}
if [[ "$ENV" != "staging" && "$ENV" != "prod" ]]; then
    echo -e "${YELLOW}[warning]${NC} invalid environment specified. defaulting to staging."
    ENV="staging"
fi
echo -e "${BLUE}[info]${NC} using environment: ${CYAN}$ENV${NC}"

# create vault_secrets.txt file
echo -e "${BLUE}[task]${NC} creating vault_secrets.txt file..."

# create header for vault_secrets.txt
cat > vault_secrets.txt <<EOF
# ansible secrets for kibamail
# this file is automatically generated by setup-infisical.sh
# do not edit manually
# do not commit to git

# environment: $ENV
# generated on: $(date)

EOF

# Initialize failure flag
FETCH_FAILED=0

fetch_secret() {
    local secret_name=$1
    local var_name=$2

    echo -e "${BLUE}[task]${NC} fetching secret: ${CYAN}$secret_name${NC}"

    # Capture both stdout and stderr
    local output=$(infisical secrets get $secret_name --domain=$INFISICAL_DOMAIN --projectId=$INFISICAL_PROJECT_ID --token=$ANSIBLE_INFISICAL_TOKEN --env=$ENV --plain 2>&1)
    local exit_code=$?

    if [ $exit_code -ne 0 ]; then
        echo -e "${RED}[error]${NC} failed to fetch secret: $secret_name"
        echo -e "${RED}[error]${NC} infisical output: $output"
        echo "# ERROR: failed to fetch $secret_name" >> vault_secrets.txt
        echo "# Error message: $output" >> vault_secrets.txt
        echo "$var_name=change_me_in_production # DO NOT USE IN PRODUCTION" >> vault_secrets.txt
        FETCH_FAILED=1
        return 1
    fi

    if [ -z "$output" ]; then
        echo -e "${RED}[error]${NC} empty value received for secret: $secret_name"
        echo "# ERROR: empty value for $secret_name" >> vault_secrets.txt
        echo "$var_name=change_me_in_production # DO NOT USE IN PRODUCTION" >> vault_secrets.txt
        FETCH_FAILED=1
        return 1
    fi

    echo "$var_name=$output" >> vault_secrets.txt
    echo -e "${GREEN}[success]${NC} secret fetched and added to vault_secrets.txt"
    return 0
}

fetch_secret "ANSIBLE_MYSQL_ROOT_USER_PASSWORD" "MYSQL_ROOT_USER_PASSWORD"
fetch_secret "ANSIBLE_MYSQL_REPLICATION_PASSWORD" "MYSQL_REPLICATION_PASSWORD"
fetch_secret "ANSIBLE_MYSQL_KIBAMAIL_USER_PASSWORD" "MYSQL_KIBAMAIL_USER_PASSWORD"
fetch_secret "ANSIBLE_MYSQL_XTRA_BACKUP_PASSWORD" "MYSQL_XTRA_BACKUP_PASSWORD"
fetch_secret "ANSIBLE_REDIS_DB_PASSWORD" "REDIS_DB_PASSWORD"

# set secure permissions
chmod 600 vault_secrets.txt
echo -e "${GREEN}[success]${NC} vault_secrets.txt created with secure permissions."

# Create a .gitignore entry for vault_secrets.txt
if [ ! -f ".gitignore" ] || ! grep -q "vault_secrets.txt" .gitignore; then
    echo -e "${BLUE}[task]${NC} adding vault_secrets.txt to .gitignore..."
    echo "vault_secrets.txt" >> .gitignore
    echo -e "${GREEN}[success]${NC} vault_secrets.txt added to .gitignore."
fi

# Check if any secrets failed to fetch
if [ $FETCH_FAILED -ne 0 ]; then
    echo
    echo -e "${RED}[error]${NC} one or more secrets failed to fetch from infisical."
    echo -e "${RED}[error]${NC} check the error messages above and in vault_secrets.txt."
    echo -e "${RED}[error]${NC} the vault_secrets.txt file contains placeholder values that should not be used in production."
    echo
    echo -e "${YELLOW}[info]${NC} possible causes:"
    echo -e "  - incorrect infisical token"
    echo -e "  - token does not have access to the required secrets"
    echo -e "  - secrets do not exist in the specified environment"
    echo -e "  - network connectivity issues"
    echo
    echo -e "${YELLOW}[info]${NC} to fix this issue:"
    echo -e "  1. verify your infisical token has access to the required secrets"
    echo -e "  2. check that the secrets exist in the $ENV environment"
    echo -e "  3. run this script again with a valid token"
    echo
    exit 1
fi

echo
echo -e "${YELLOW}[info]${NC} to add more secrets in the future, modify this script to include:"
echo -e "  fetch_secret \"YOUR_SECRET_NAME\" \"YOUR_VARIABLE_NAME\""
echo

exit 0
